{"version":3,"sources":["HavenCalc.js","App.js","serviceWorker.js","index.js"],"names":["HavenCalc","props","state","pLength","lbLength","handleChange","bind","e","preventDefault","this","setState","target","name","value","partLength","wholeParts","parseInt","mathOffall","toFixed","lostFromCut","remainingOffall","class","onChange","type","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAgFeA,E,kDA7Eb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,SAAU,IAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANJ,E,yDAULC,GACXA,EAAEC,iBACFC,KAAKC,SAAL,eACGH,EAAEI,OAAOC,KAAOL,EAAEI,OAAOE,U,+BAY5B,IAAIC,EAAaL,KAAKP,MAAMC,QACxBC,EAAWK,KAAKP,MAAME,SAGtBW,EAAaC,SAASZ,EAASU,GAC/BG,GAAcb,EAAWU,GAAYI,QAAQ,GAC7CC,EAA2B,KAAbJ,EACdK,GAAmBH,EAAaE,GAAaD,QAAQ,GAEzD,OACE,yBAAKG,MAAM,aACT,0BAAMA,MAAM,eACN,sDACA,2BAAOC,SAAUb,KAAKJ,aAAckB,KAAK,SAASX,KAAK,UAAUC,MAAOC,IACxE,yDACA,2BAAOQ,SAAUb,KAAKJ,aAAckB,KAAK,SAASX,KAAK,WAAWC,MAAOT,KAE/E,wBAAIiB,MAAM,eAAV,iBACA,4BACE,sFACA,wFACA,yEAEF,2BAAOA,MAAM,gBACX,+BACE,4BACE,2CACA,8CACA,2CACA,2CACA,6CACA,kDAGJ,+BACE,4BACE,4BAAKP,GACL,4BAAKV,GACL,4BAAKW,GACL,4BAAKE,GACL,4BAAKE,GACJC,EAAkB,GAAKA,EAAkB,EAAI,wBAAIC,MAAM,OAAOD,GAAwB,wBAAIC,MAAM,SAASD,W,GAnEhGI,a,kBCYTC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6b5ea529.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass HavenCalc extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      pLength: '',\n      lbLength: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  handleChange(e){\n    e.preventDefault();\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n\n\n\n\n\n\n\n  render(){\n    let partLength = this.state.pLength;\n    let lbLength = this.state.lbLength;\n\n    //math variables\n    let wholeParts = parseInt(lbLength/partLength);\n    let mathOffall = (lbLength % partLength).toFixed(3);\n    let lostFromCut = wholeParts * .125;\n    let remainingOffall = (mathOffall - lostFromCut).toFixed(3);\n\n    return(\n      <div class=\"container\">\n        <form class=\"six columns\">\n              <label>Input Part Length: </label>\n              <input onChange={this.handleChange} type=\"number\" name=\"pLength\" value={partLength} />\n              <label>Input Longbar Length: </label>\n              <input onChange={this.handleChange} type=\"number\" name=\"lbLength\" value={lbLength} />\n        </form>\n        <h2 class=\"six columns\">Haven Calc 3k</h2>\n        <ul>\n          <li>.125 (1/8th inch) is lost per cut from verticle blade.</li>\n          <li>Aim for 2-3 inch left over. Less may destroy last piece.</li>\n          <li>Arrow UP or DOWN and watch magic happen.</li>\n        </ul>\n        <table class=\"u-full-width\">\n          <thead>\n            <tr>\n              <th>Part Length</th>\n              <th>Longbar Length</th>\n              <th>Whole Parts</th>\n              <th>Math Offall</th>\n              <th>Lost from Cut</th>\n              <th>Remaining Offall</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{partLength}</td>\n              <td>{lbLength}</td>\n              <td>{wholeParts}</td>\n              <td>{mathOffall}</td>\n              <td>{lostFromCut}</td>\n              {remainingOffall < 2 || remainingOffall > 4 ? <td class='red'>{remainingOffall}</td> : <td class='green'>{remainingOffall}</td>}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n\n    )\n  }\n}\n\nexport default HavenCalc;\n","import React from 'react';\nimport HavenCalc from './HavenCalc';\nimport './normalize.css';\nimport './skeleton.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HavenCalc />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}